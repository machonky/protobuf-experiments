// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TimeSpan.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtocolBufferExperiments.Common {

  /// <summary>Holder for reflection information generated from TimeSpan.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class TimeSpanReflection {

    #region Descriptor
    /// <summary>File descriptor for TimeSpan.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TimeSpanReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5UaW1lU3Bhbi5wcm90bxIgUHJvdG9jb2xCdWZmZXJFeHBlcmltZW50cy5D",
            "b21tb24iTgoIVGltZVNwYW4SDAoERGF5cxgBIAEoBRINCgVIb3VycxgCIAEo",
            "BRIPCgdNaW51dGVzGAMgASgFEhQKDE1pbGxpc2Vjb25kcxgEIAEoBWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::ProtocolBufferExperiments.Common.TimeSpan), global::ProtocolBufferExperiments.Common.TimeSpan.Parser, new[]{ "Days", "Hours", "Minutes", "Milliseconds" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TimeSpan : pb::IMessage<TimeSpan> {
    private static readonly pb::MessageParser<TimeSpan> _parser = new pb::MessageParser<TimeSpan>(() => new TimeSpan());
    public static pb::MessageParser<TimeSpan> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtocolBufferExperiments.Common.TimeSpanReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TimeSpan() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TimeSpan(TimeSpan other) : this() {
      days_ = other.days_;
      hours_ = other.hours_;
      minutes_ = other.minutes_;
      milliseconds_ = other.milliseconds_;
    }

    public TimeSpan Clone() {
      return new TimeSpan(this);
    }

    /// <summary>Field number for the "Days" field.</summary>
    public const int DaysFieldNumber = 1;
    private int days_;
    public int Days {
      get { return days_; }
      set {
        days_ = value;
      }
    }

    /// <summary>Field number for the "Hours" field.</summary>
    public const int HoursFieldNumber = 2;
    private int hours_;
    public int Hours {
      get { return hours_; }
      set {
        hours_ = value;
      }
    }

    /// <summary>Field number for the "Minutes" field.</summary>
    public const int MinutesFieldNumber = 3;
    private int minutes_;
    public int Minutes {
      get { return minutes_; }
      set {
        minutes_ = value;
      }
    }

    /// <summary>Field number for the "Milliseconds" field.</summary>
    public const int MillisecondsFieldNumber = 4;
    private int milliseconds_;
    public int Milliseconds {
      get { return milliseconds_; }
      set {
        milliseconds_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as TimeSpan);
    }

    public bool Equals(TimeSpan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Days != other.Days) return false;
      if (Hours != other.Hours) return false;
      if (Minutes != other.Minutes) return false;
      if (Milliseconds != other.Milliseconds) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Days != 0) hash ^= Days.GetHashCode();
      if (Hours != 0) hash ^= Hours.GetHashCode();
      if (Minutes != 0) hash ^= Minutes.GetHashCode();
      if (Milliseconds != 0) hash ^= Milliseconds.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Days != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Days);
      }
      if (Hours != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hours);
      }
      if (Minutes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Minutes);
      }
      if (Milliseconds != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Milliseconds);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Days != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Days);
      }
      if (Hours != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hours);
      }
      if (Minutes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minutes);
      }
      if (Milliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Milliseconds);
      }
      return size;
    }

    public void MergeFrom(TimeSpan other) {
      if (other == null) {
        return;
      }
      if (other.Days != 0) {
        Days = other.Days;
      }
      if (other.Hours != 0) {
        Hours = other.Hours;
      }
      if (other.Minutes != 0) {
        Minutes = other.Minutes;
      }
      if (other.Milliseconds != 0) {
        Milliseconds = other.Milliseconds;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Days = input.ReadInt32();
            break;
          }
          case 16: {
            Hours = input.ReadInt32();
            break;
          }
          case 24: {
            Minutes = input.ReadInt32();
            break;
          }
          case 32: {
            Milliseconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
