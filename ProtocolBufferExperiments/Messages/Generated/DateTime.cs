// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DateTime.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtocolBufferExperiments.Common {

  /// <summary>Holder for reflection information generated from DateTime.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class DateTimeReflection {

    #region Descriptor
    /// <summary>File descriptor for DateTime.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DateTimeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5EYXRlVGltZS5wcm90bxIgUHJvdG9jb2xCdWZmZXJFeHBlcmltZW50cy5D",
            "b21tb24idwoIRGF0ZVRpbWUSDAoEWWVhchgBIAEoBRINCgVNb250aBgCIAEo",
            "BRILCgNEYXkYAyABKAUSDAoESG91chgEIAEoBRIOCgZNaW51dGUYBSABKAUS",
            "DgoGU2Vjb25kGAYgASgFEhMKC01pbGxpc2Vjb25kGAcgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::ProtocolBufferExperiments.Common.DateTime), global::ProtocolBufferExperiments.Common.DateTime.Parser, new[]{ "Year", "Month", "Day", "Hour", "Minute", "Second", "Millisecond" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DateTime : pb::IMessage<DateTime> {
    private static readonly pb::MessageParser<DateTime> _parser = new pb::MessageParser<DateTime>(() => new DateTime());
    public static pb::MessageParser<DateTime> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtocolBufferExperiments.Common.DateTimeReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DateTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DateTime(DateTime other) : this() {
      year_ = other.year_;
      month_ = other.month_;
      day_ = other.day_;
      hour_ = other.hour_;
      minute_ = other.minute_;
      second_ = other.second_;
      millisecond_ = other.millisecond_;
    }

    public DateTime Clone() {
      return new DateTime(this);
    }

    /// <summary>Field number for the "Year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "Month" field.</summary>
    public const int MonthFieldNumber = 2;
    private int month_;
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "Day" field.</summary>
    public const int DayFieldNumber = 3;
    private int day_;
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "Hour" field.</summary>
    public const int HourFieldNumber = 4;
    private int hour_;
    public int Hour {
      get { return hour_; }
      set {
        hour_ = value;
      }
    }

    /// <summary>Field number for the "Minute" field.</summary>
    public const int MinuteFieldNumber = 5;
    private int minute_;
    public int Minute {
      get { return minute_; }
      set {
        minute_ = value;
      }
    }

    /// <summary>Field number for the "Second" field.</summary>
    public const int SecondFieldNumber = 6;
    private int second_;
    public int Second {
      get { return second_; }
      set {
        second_ = value;
      }
    }

    /// <summary>Field number for the "Millisecond" field.</summary>
    public const int MillisecondFieldNumber = 7;
    private int millisecond_;
    public int Millisecond {
      get { return millisecond_; }
      set {
        millisecond_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as DateTime);
    }

    public bool Equals(DateTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if (Day != other.Day) return false;
      if (Hour != other.Hour) return false;
      if (Minute != other.Minute) return false;
      if (Second != other.Second) return false;
      if (Millisecond != other.Millisecond) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Hour != 0) hash ^= Hour.GetHashCode();
      if (Minute != 0) hash ^= Minute.GetHashCode();
      if (Second != 0) hash ^= Second.GetHashCode();
      if (Millisecond != 0) hash ^= Millisecond.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Month);
      }
      if (Day != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Day);
      }
      if (Hour != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Hour);
      }
      if (Minute != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Minute);
      }
      if (Second != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Second);
      }
      if (Millisecond != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Millisecond);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Month);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Hour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hour);
      }
      if (Minute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minute);
      }
      if (Second != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Second);
      }
      if (Millisecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Millisecond);
      }
      return size;
    }

    public void MergeFrom(DateTime other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Hour != 0) {
        Hour = other.Hour;
      }
      if (other.Minute != 0) {
        Minute = other.Minute;
      }
      if (other.Second != 0) {
        Second = other.Second;
      }
      if (other.Millisecond != 0) {
        Millisecond = other.Millisecond;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            Month = input.ReadInt32();
            break;
          }
          case 24: {
            Day = input.ReadInt32();
            break;
          }
          case 32: {
            Hour = input.ReadInt32();
            break;
          }
          case 40: {
            Minute = input.ReadInt32();
            break;
          }
          case 48: {
            Second = input.ReadInt32();
            break;
          }
          case 56: {
            Millisecond = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
